//
//  NDMediaDevice.h
//  NatDevice
//
//  Created by Yusuf Olokoba on 3/02/2021.
//  Copyright Â© 2022 NatML Inc. All rights reserved.
//

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include "NDMediaSession.h"

#pragma region --Enumerations--
/*!
 @enum NDMediaDeviceFlags
 
 @abstract Immutable properties of media devices.
 
 @constant ND_DEVICE_FLAG_INTERNAL
 Device is internal.

 @constant ND_DEVICE_FLAG_EXTERNAL
 Device is external.

 @constant ND_DEVICE_FLAG_DEFAULT
 Device is the default device for its media type.

 @constant ND_AUDIO_FLAG_ECHO_CANCELLATION
 Audio device supports echo cancellation.

 @constant ND_CAMERA_FLAG_FRONT_FACING
 Camera device is front-facing.

 @constant ND_CAMERA_FLAG_FLASH
 Camera device supports flash when capturing photos.

 @constant ND_CAMERA_FLAG_TORCH
 Camera device supports torch.

 @constant ND_CAMERA_FLAG_DEPTH
 Camera device supports depth streaming.

 @constant ND_CAMERA_FLAG_EXPOSURE_CONTINUOUS
 Camera device supports continuous auto exposure.

 @constant ND_CAMERA_FLAG_EXPOSURE_LOCK
 Camera device supports locked auto exposure.

 @constant ND_CAMERA_FLAG_EXPOSURE_MANUAL
 Camera device supports manual exposure.

 @constant ND_CAMERA_FLAG_EXPOSURE_POINT
 Camera device supports setting exposure point.

 @constant ND_CAMERA_FLAG_FOCUS_CONTINUOUS
 Camera device supports continuous auto exposure.

 @constant ND_CAMERA_FLAG_LOCKED_FOCUS
 Camera device supports locked auto focus.

 @constant ND_CAMERA_FLAG_FOCUS_POINT
 Camera device supports setting focus point.

 @constant ND_CAMERA_FLAG_WHITE_BALANCE_CONTINUOUS
 Camera device supports continuous auto white balance.

 @constant ND_CAMERA_FLAG_WHITE_BALANCE_LOCK
 Camera device supports locked auto white balance.

 @constant ND_CAMERA_FLAG_VIDEO_STABILIZATION
 Camera device supports video stabilization.
*/
enum NDMediaDeviceFlags {
    // MediaDevice
    ND_DEVICE_FLAG_INTERNAL                 = 1 << 0,
    ND_DEVICE_FLAG_EXTERNAL                 = 1 << 1,
    ND_DEVICE_FLAG_DEFAULT                  = 1 << 3,
    // AudioDevice
    ND_AUDIO_FLAG_ECHO_CANCELLATION         = 1 << 2,
    // CameraDevice
    ND_CAMERA_FLAG_FRONT_FACING             = 1 << 6,
    ND_CAMERA_FLAG_FLASH                    = 1 << 7,
    ND_CAMERA_FLAG_TORCH                    = 1 << 8,
    ND_CAMERA_FLAG_DEPTH                    = 1 << 15,
    // CameraDevice.Exposure
    ND_CAMERA_FLAG_EXPOSURE_CONTINUOUS      = 1 << 16,
    ND_CAMERA_FLAG_EXPOSURE_LOCK            = 1 << 11,
    ND_CAMERA_FLAG_EXPOSURE_MANUAL          = 1 << 14,
    ND_CAMERA_FLAG_EXPOSURE_POINT           = 1 << 9,
    // CameraDevice.Focus
    ND_CAMERA_FLAG_FOCUS_CONTINUOUS         = 1 << 17,
    ND_CAMERA_FLAG_FOCUS_LOCK               = 1 << 12,
    ND_CAMERA_FLAG_FOCUS_POINT              = 1 << 10,
    // CameraDevice.WhiteBalance
    ND_CAMERA_FLAG_WHITE_BALANCE_CONTINUOUS = 1 << 18,
    ND_CAMERA_FLAG_WHITE_BALANCE_LOCK       = 1 << 13,
    // CameraDevice.VideoStabilization
    ND_CAMERA_FLAG_VIDEO_STABILIZATION      = 1 << 19,
};
typedef enum NDMediaDeviceFlags NDMediaDeviceFlags;
#pragma endregion


#pragma region --Types--
/*!
 @struct NDMediaDevice
 
 @abstract Media device.

 @discussion Media device.
*/
struct NDMediaDevice;
typedef struct NDMediaDevice NDMediaDevice;

/*!
 @struct NDSampleBuffer
 
 @abstract Sample buffer generated by a media device.

 @discussion Sample buffer generated by a media device.
*/
struct NDSampleBuffer;
typedef struct NDSampleBuffer NDSampleBuffer;
#pragma endregion


#pragma region --Delegates--
/*!
 @abstract Callback invoked with new sample buffer from a media device.
 
 @param context
 User-provided context.
 
 @param sampleBuffer
 Sample buffer.
*/
typedef void (*NDSampleBufferHandler) (void* context, NDSampleBuffer* sampleBuffer);

/*!
 @abstract Callback invoked when a camera device is disconnected.
 
 @param context
 User-provided context.

 @param mediaDevice
 Media device that was disconnected.
*/
typedef void (*NDDeviceDisconnectHandler) (void* context, NDMediaDevice* mediaDevice);
#pragma endregion


#pragma region --Client API--
/*!
 @function NDReleaseMediaDevice

 @abstract Release a media device.

 @discussion Release a media device.

 @param mediaDevice
 Media device.
*/
NML_BRIDGE NML_EXPORT NDMediaStatus NML_API NDReleaseMediaDevice (NDMediaDevice* mediaDevice);

/*!
 @function NDMediaDeviceGetUniqueID

 @abstract Get the media device unique ID.

 @discussion Get the media device unique ID.

 @param mediaDevice
 Media device.

 @param destination
 Destination UTF-8 string.
*/
NML_BRIDGE NML_EXPORT NDMediaStatus NML_API NDMediaDeviceGetUniqueID (
    NDMediaDevice* mediaDevice,
    char* destination
);

/*!
 @function NDMediaDeviceGetName
 
 @abstract Media device name.
 
 @discussion Media device name.
 
 @param mediaDevice
 Media device.
 
 @param destination
 Destination UTF-8 string.
*/
NML_BRIDGE NML_EXPORT NDMediaStatus NML_API NDMediaDeviceGetName (
    NDMediaDevice* mediaDevice,
    char* destination
);

/*!
 @function NDMediaDeviceGetFlags
 
 @abstract Get the media device flags.
 
 @discussion Get the media device flags.
 
 @param mediaDevice
 Media device.
 
 @returns Device flags.
*/
NML_BRIDGE NML_EXPORT NDMediaDeviceFlags NML_API NDMediaDeviceGetFlags (NDMediaDevice* mediaDevice);

/*!
 @function NDMediaDeviceIsRunning
 
 @abstract Is the device running?
 
 @discussion Is the device running?
 
 @param mediaDevice
 Media device.
 
 @returns True if media device is running.
*/
NML_BRIDGE NML_EXPORT bool NML_API NDMediaDeviceIsRunning (NDMediaDevice* mediaDevice);

/*!
 @function NDMediaDeviceStartRunning
 
 @abstract Start running an media device.
 
 @discussion Start running an media device.
 
 @param mediaDevice
 Media device.

 @param sampleBufferHandler
 Sample buffer delegate to receive sample buffers as the device produces them.

 @param context
 User-provided context to be passed to the sample buffer delegate. Can be `NULL`.
*/
NML_BRIDGE NML_EXPORT NDMediaStatus NML_API NDMediaDeviceStartRunning (
    NDMediaDevice* mediaDevice,
    NDSampleBufferHandler sampleBufferHandler,
    void* context
);

/*!
 @function NDMediaDeviceStopRunning
 
 @abstract Stop running device.
 
 @discussion Stop running device.
 
 @param mediaDevice
 Media device.
*/
NML_BRIDGE NML_EXPORT NDMediaStatus NML_API NDMediaDeviceStopRunning (NDMediaDevice* mediaDevice);

/*!
 @function NDMediaDeviceSetDisconnectHandler

 @abstract Set the device disconnect handler.

 @discussion Set the device disconnect handler.
 This provided function pointer is invoked when the device is disconnected.

 @param mediaDevice
 Media device.

 @param disconnectHandler
 Device disconnect handler. Can be `NULL`.

 @param context
 User-provided context. Can be `NULL`.
*/
NML_BRIDGE NML_EXPORT NDMediaStatus NML_API NDMediaDeviceSetDisconnectHandler (
    NDMediaDevice* mediaDevice,
    NDDeviceDisconnectHandler disconnectHandler,
    void* context
);
#pragma endregion